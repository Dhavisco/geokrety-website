os: linux
dist: focal
language: php

services:
  - docker

addons:
  firefox: latest
  apt:
    packages:
      - "python3"
      - "python3-pip"

branches:
  except:
    - /\+travis\d+$/

jobs:
  include:
    - stage: test-qa
      php: 7.4
      before_script:
        # Use 1.27.4 as later versions have bug cloning git repo over TLS `version `OPENSSL_1_1_1' not found`
        # https://stackoverflow.com/questions/66579446/error-executing-docker-compose-building-webserver-unable-to-prepare-context-un/67357899#67357899
        - curl -L https://github.com/docker/compose/releases/download/1.27.4/docker-compose-Linux-x86_64 -o docker-compose && chmod a+x docker-compose
      if: type = 'push' AND branch NOT IN (master, l10n_master, l10n_new-theme)
      script:
        - export PGUSER=geokrety
        - export PGPASSWORD=geokrety
        - export PGDATABASE=geokrety
        - export PGHOST=localhost
        - export PGPORT=5433
        - export DOCKER_COMPOSE="./docker-compose -p gk -f docker-compose.local.yml"

        # Retrieve huge file to initialize database
        - ./website/db/get_huge_dump_files.sh

        - sudo apt-get update > /dev/null && sudo apt-get install -y postgresql-client-12 postgis httping -qq > /dev/null

        # Launch Postgres
        - ${DOCKER_COMPOSE} pull postgres
        - ${DOCKER_COMPOSE} up -d --no-build postgres

        # import SRTM subset for tests
        - timeout 60s bash -c "while ! pg_isready; do sleep 1; done"
        # - ${DOCKER_COMPOSE} logs postgres
        - ./website/db/tests-srtm-import.sh

        # Other services
        - ${DOCKER_COMPOSE} pull website-base cdn redis minio svg-to-png
        - ${DOCKER_COMPOSE} build website > /dev/null
        - ${DOCKER_COMPOSE} build pictures-processor pictures-downloader pictures-uploader > /dev/null
        - ${DOCKER_COMPOSE} up -d --no-build
        - docker ps -a

        # Wait for webserver
        - set -e
        - for i in $(seq 60); do httping -sGc1 -o 200,302 http://localhost:3001/ && { echo OK; break; } || ${DOCKER_COMPOSE} logs website ; sleep 1 ; done || exit 1
        - set +e

        # Test the database
        - sudo apt-get install -y libtap-parser-sourcehandler-pgtap-perl -qq > /dev/null
        - psql -c "CREATE DATABASE tests WITH TEMPLATE $PGDATABASE OWNER $PGUSER;"
        - PGDATABASE=tests PGOPTIONS=--search_path=public,pgtap,geokrety pg_prove -ot website/db/tests/test*.sql

#        # Seed database with initial values
#        - ${DOCKER_COMPOSE} exec website make composer-install-dev
#        - ${DOCKER_COMPOSE} exec website make seed
#
#        # Tests with PHPUnit
#        - ${DOCKER_COMPOSE} exec website make test

        - ${DOCKER_COMPOSE} exec website make test-health

        # Install RobotFramework
        - pip3 install -r tests-qa/requirements.txt > /dev/null

#        # Install and launch BrowserStack Local agent
#        - curl -L https://www.browserstack.com/browserstack-local/BrowserStackLocal-linux-x64.zip | gunzip > BrowserStackLocal && chmod a+x BrowserStackLocal
#        - export BS_ENABLED=1
#        - export BS_LOCAL=true
#        - export BS_LOCAL_ID="travis-${TRAVIS_BRANCH}-${TRAVIS_BUILD_NUMBER}"
#        - export BS_BUILD=${TRAVIS_BRANCH}
#        - export GEOKRETY_URL=http://bs-local.com:3000/
#        - ./BrowserStackLocal --key "${BS_TOKEN}" --verbose --daemon start --local-identifier "${BS_LOCAL_ID}" --force-local

        # Download geckodriver
        - cd tests-qa && make download_geckodriver && cd ..
        - sudo apt-get install -y ttf-bitstream-vera fonts-urw-base35 -qq > /dev/null

        # Wait for services to be reachable
        - export GEOKRETY_URL=http://localhost:3001/
        - export HEADLESS=True
        - for i in $(seq 60); do httping -sGc1 -o 200,302 "${GEOKRETY_URL}" && echo OK && break ; sleep 1 ; done
        # Launch RobotFramework testing
        - make test-qa
#        - (cd tests-qa && robot --variable browser:Firefox --output output.xml --debugfile debugfile.log --log log.html --report report.html --xunit xUnit.xml -d docs/$TRAVIS_BRANCH -V acceptance/vars/robot-vars.py acceptance/)
#        - (cd tests-qa && robot --variable browser:Chrome --output output.xml --debugfile debugfile.log --log log.html --report report.html --xunit xUnit.xml -d docs/$TRAVIS_BRANCH -V acceptance/vars/robot-vars.py acceptance/)

        # Deploy results to gh-pages
        - git clone --quiet --branch gh-pages --single-branch https://${GITHUB_TOKEN}@github.com/geokrety/geokrety-website-qa.git publish
        - cd publish &&
          cp -a ../tests-qa/docs/${TRAVIS_BRANCH} . &&
          git status &&
          git add . &&
          git config user.name  "Travis" &&
          git config user.email "travis@travis-ci.org" &&
          git commit -m "Update QA tests" &&
          git push -fq origin
        - echo QA Tests report is available at https://geokrety.github.io/geokrety-website-qa/${TRAVIS_BRANCH}/report.html
